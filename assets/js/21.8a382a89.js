(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{418:function(t,s,e){"use strict";e.r(s);var a=e(41),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"testez-design-notes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#testez-design-notes"}},[t._v("#")]),t._v(" TestEZ Design Notes")]),t._v(" "),e("h2",{attrs:{id:"test-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test-flow"}},[t._v("#")]),t._v(" Test Flow")]),t._v(" "),e("p",[t._v("Testing using this module is broken down into four steps:")]),t._v(" "),e("ol",[e("li",[t._v("Load tests")]),t._v(" "),e("li",[t._v("Create test plan")]),t._v(" "),e("li",[t._v("Execute test plan")]),t._v(" "),e("li",[t._v("Report results")])]),t._v(" "),e("p",[t._v("Before executing the test plan, we can also modify it to change semantics separately from the code.")]),t._v(" "),e("h3",{attrs:{id:"_1-load-tests"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-load-tests"}},[t._v("#")]),t._v(" #1: Load tests")]),t._v(" "),e("p",[t._v("All ModuleScript objects that have a name ending in "),e("code",[t._v(".spec")]),t._v(" are loaded as tests. On the filesystem, they appear as "),e("code",[t._v(".spec.lua")]),t._v(" files.")]),t._v(" "),e("p",[t._v("These tests should return a function that describes the actual test using the "),e("code",[t._v("describe")]),t._v(", "),e("code",[t._v("it")]),t._v(", and "),e("code",[t._v("expect")]),t._v(" functions. These functions are automatically injected into the test environment when available.")]),t._v(" "),e("p",[t._v("A test suite for addition might look like this:")]),t._v(" "),e("div",{staticClass:"language-lua extra-class"},[e("pre",{pre:!0,attrs:{class:"language-lua"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("describe")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Addition"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("it")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"should be commutative"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("\n\t\t\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("equal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("it")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"should be associative"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n\t\t\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("equal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),e("p",[t._v("All test assertions should be contained inside the "),e("code",[t._v("it")]),t._v(" blocks.")]),t._v(" "),e("h3",{attrs:{id:"_2-create-test-plan"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-create-test-plan"}},[t._v("#")]),t._v(" #2: Create test plan")]),t._v(" "),e("p",[t._v("A tree of tests is constructed out of all the "),e("code",[t._v("describe")]),t._v(" and "),e("code",[t._v("it")]),t._v(" calls in the tree. No test code is actually run.")]),t._v(" "),e("p",[t._v("This allows us to potentially output a tree of the tests in the system without actually running them. It also gives us a mechanism to run only specific tests.")]),t._v(" "),e("p",[t._v("This step is carried out by "),e("code",[t._v("TestPlanner")]),t._v(". It uses "),e("code",[t._v("TestPlanBuilder")]),t._v(" to hold temporary state relevant only when building the plan, and then returns a "),e("code",[t._v("TestPlan")]),t._v(" object.")]),t._v(" "),e("p",[t._v("To debug the test plan tree, use "),e("code",[t._v("plan:visualize()")])]),t._v(" "),e("h3",{attrs:{id:"_3-execute-test-plan"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-execute-test-plan"}},[t._v("#")]),t._v(" #3: Execute test plan")]),t._v(" "),e("p",[t._v("A tree of test results is created that mirrors the test plan nodes.")]),t._v(" "),e("p",[t._v("This step is carried out by "),e("code",[t._v("TestRunner")]),t._v(". It creates a "),e("code",[t._v("TestSession")]),t._v(" using the "),e("code",[t._v("TestPlan")]),t._v(" from the previous step. This object holds state only relevant when building the test results, then returns a "),e("code",[t._v("TestResults")]),t._v(" object.")]),t._v(" "),e("p",[t._v("To debug the result tree, use "),e("code",[t._v("results:visualize()")])]),t._v(" "),e("h3",{attrs:{id:"_4-report-results"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-report-results"}},[t._v("#")]),t._v(" #4: Report results")]),t._v(" "),e("p",[t._v("Reporting is handled by a test reporter object, which is just a table with a "),e("code",[t._v("report")]),t._v(" method on it. It takes a "),e("code",[t._v("TestResults")]),t._v(" object and outputs it to standard output, creates a GUI, or tells TestService about the results.")]),t._v(" "),e("p",[t._v("This is pluggable, and could conceivably output in any format.")]),t._v(" "),e("h2",{attrs:{id:"system-architecture"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#system-architecture"}},[t._v("#")]),t._v(" System Architecture")]),t._v(" "),e("p",[t._v("The system is broken down in a way that eliminates global state, provides multiple abstraction layers for each operation, and stores plain data in a way that's agnostic to the operations performed upon it.")]),t._v(" "),e("p",[t._v("In both the planning and running phases of tests, a stateless module ("),e("code",[t._v("TestPlanner")]),t._v(" and "),e("code",[t._v("TestRunner")]),t._v(") creates a temporary object to hold state about the operation it's trying to perform. These objects ("),e("code",[t._v("TestPlanBuilder")]),t._v(" and "),e("code",[t._v("TestSession")]),t._v(") allow the code to traverse and build trees without passing around extra state between iterations.")]),t._v(" "),e("p",[t._v("When the modules are done using these builder objects, they call "),e("code",[t._v("finalize")]),t._v(" on them to receive a "),e("code",[t._v("TestPlan")]),t._v(" or "),e("code",[t._v("TestResults")]),t._v(" object. These objects are passed back to the original caller.")]),t._v(" "),e("p",[e("code",[t._v("TestBootStrap")]),t._v(" packages up use of the stages of testing into a simpler interface that also automatically locates test modules. When more advanced functionality is desired, it's easy to stop using TestBootstrap and instead call the underlying objects directly.")])])}),[],!1,null,null,null);s.default=n.exports}}]);